#!/usr/bin/env python3

import argparse
import importlib
import json
import re
import sys
import textwrap
import urllib.request


def camel_to_snake(s):
    s1 = re.sub("(.)([A-Z][a-z]+)", r"\1_\2", s)
    return re.sub("([a-z0-9])([A-Z])", r"\1_\2", s1).lower()


def desc_to_funcname(desc):
    s = "test_" + desc.replace(" ", "_").lower()
    return re.sub("[^a-z0-9_]", "", s)


def download_canonical_data(exercise):
    url = f"https://raw.githubusercontent.com/exercism/problem-specifications/master/exercises/{exercise}/canonical-data.json"
    with urllib.request.urlopen(url) as f:
        return json.loads(f.read().decode())


def flatten_cases(data):
    cases = []
    for i in data["cases"]:
        if "cases" in i:
            for j in i["cases"]:
                cases.append(j)
        else:
            cases.append(i)
    return cases


def gen_main(cases):
    str_list = []
    str_list.append("int main(void) {\n    UNITY_BEGIN();\n")
    for case in cases:
        funcname = desc_to_funcname(case["description"])
        str_list.append(f"    RUN_TEST({funcname});\n")
    str_list.append("    return UNITY_END();\n}\n")
    return "".join(str_list)


def gen_test_case(mod, case, test_ignore):
    str_list = []
    funcname = desc_to_funcname(case["description"])
    str_list.append(f"void {funcname}(void) {{\n")
    if test_ignore:
        str_list.append("    TEST_IGNORE();\n")
    prop = camel_to_snake(case["property"])
    body = mod.gen_func_body(prop, case["input"], case["expected"])
    body = textwrap.indent(body, "    ")
    str_list.append(f"{body}}}\n\n")
    return "".join(str_list)


def gen_test_cases(mod, cases):
    str_list = []
    test_ignore = False
    for case in cases:
        str_list.append(gen_test_case(mod, case, test_ignore))
        test_ignore = True
    return "".join(str_list)


def gen_test_file(mod, version, cases):
    str_list = []
    str_list.append(f"// Version: {version}\n\n")
    str_list.append(mod.FUNC_PROTO)
    str_list.append("\nvoid setUp(void) {\n}\n\nvoid tearDown(void) {\n}\n\n")
    str_list.append(gen_test_cases(mod, cases))
    str_list.append(gen_main(cases))
    return "".join(str_list)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("exercise")
    args = parser.parse_args()
    data = download_canonical_data(args.exercise)
    version = data.get("version", 0)
    cases = flatten_cases(data)
    exercise = args.exercise.replace("-", "_")
    mod = importlib.import_module("exercises." + exercise)
    s = gen_test_file(mod, version, cases)
    path = f"{sys.path[0]}/../exercises/practice/{args.exercise}/{exercise}_test.c"
    with open(path, "w") as f:
        f.write(s)


if __name__ == "__main__":
    main()
